{
  "name": "Devils-dice-neural-network",
  "tagline": "",
  "body": "### Abstract\r\nDevil’s Dice is a dice playing game of chance.  It is more formally known as Pig.  The main objective of this project was to build a Neural Network (NN) that could learn when to roll or pass the dice for Devil’s Dice.  This project eventually evolved into seeing how accurately a NN could learn from other players.  This helps demonstrate a NN’s ability to constantly learn and build (mimic) personalities.\r\n\r\nThe end goal of this project was to build a dynamic player.  I wanted a player that didn’t have to be told how to paly but rather could watch and learn how to play.  The non-NN players were automated methods of playing with fixed and hard-coded conditions, they were told how to play.  Each NN learned from one of these automated methods.  They were all then put up against each other in a tournament.  The results show how they did against each other and compared against their original counterpart.\r\n\r\n### Rules of the Game\r\n1. When it is your turn, you can role the dice to obtain points.  The number that is rolled is the number of points obtained for that role.\r\n2. At anytime during your turn, you may decide to pass the dice to your opponent instead of rolling.  This will bank your collected points from that turn and add them to your overall total score.\r\n3. If at anytime you roll a 1 on the dice, you loose all your points accumulated that turn and must then pass the dice to your opponent.\r\n4. First person to accumulate 100 points wins.\r\n\r\n### Problem Description\r\n**Given** a six sided dice and the chance to role it for points or pass to bank the accumulated points,\r\n**Find** out if a Neural Network can learn when it should risk rolling the dice or when it should pass the dice.  Find if this can be done from observing other automated methods designed for playing the game\r\n**Such that** the Neural Network performs as good as or better then its original counterpart.\r\n\r\n\r\n\r\n### Automated Method Structures (AIs)\r\nEach Method is forced to role at least once because it make no sense for them to pass right off the bat and “skip” their turn.\r\nRandom Simply randomly selects its decision.  No intelligence involved.\r\nOriginal is the AI I originally built for this game.  It is based off of the environmental conditions laid out in the “Application to the Project” section of this poster.  It was designed to play the game just as I would (as a human).  The AI processes the environment by comparing the conditions to hard coded situations.  These situations will set 3 “modifiers” to individual numbers which when added together will be between 0 and 100.  This creates a threshold.  This threshold starts low then works its way up to 100 as the turn progresses.  The AI makes a decision by rolling a random number 0 – 100.  If the number rolled is above the threshold, the AI roles, otherwise, the AI passes.\r\nOptimal is the mathematically proven optimal solution for this specific game.  It consists of simply rolling the dice until you have accumulated 20 points for your turn then it passes. \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}